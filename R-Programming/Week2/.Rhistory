?split
str(split(x, list(a,b), drop = TRUE))
log(-1)
install.packages('swirl')
library(swirl)
install_from_swirl("R Programming")
swirl()
5+7
x<-5+7
x
y=x-3
y<-x-3
y
a<-c(1.1, 9, 3.14)
z<-c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z*2+100
my_sqrt=sqrt(z-1)
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
c(1, 2, 3, 4) + c(0, 10, 100)
z*2+1000
my
my_div
getwd()
ls()
x<-9
ls
ls()
list.files()
dir()
list.files(.)
list.files(".")
list.files()
dir()
?list.files
args()
args(list.files())
args(list.files)
old.dir<-getwd()
getwd()
setwd("./specdata/../../Week1/swirl/"
)
getwd()
dir.create('testdir')
setwd(testdir)
setwd('testdir/')
file.create('mytest.R')
list.files()
file.exists('mytest.R')
file.info('mytest.R')
file.rename('*', 'mytest2.R')
file.rename('mytest.R', 'mytest2.R')
file.copy('mytest2.R',to = 'mytest3.R')
file.path('mytest3.R')
file.path('folder1', 'folder2')
?dir.create
dir.create('testdir2/testdir3')
?dir.create
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
setwd()
setwd(old.dir)
swirl()
1:20
pi:10
15:1
?`:`
seq(1,20)
?seq
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, length=30)
my_seq
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along()
seq_along(my_seq)
rep(0, 40)
rep(0, times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each = 10)
0.5,55, -10, 6
c(0.5,55, -10, 6)
c(0.5,55,-10,6)
num_vect<-c(0.5, 55.0, -10.0, 6.0)
tf<-num_vect<1
tf
num_vect>=6
my_char<-c("My", "name", "is")
my_char
paste(my_char, collapse=" '")
paste(my_char, collapse=" ")
c(my_char, "Roland")
my_name <- c(my_char, "Roland")
my_name
paste(my_name, collapse = ' ')
paste("Hello",
| "world!", sep = " "),
paste("Hello", "world!", sep = " "),
paste(c("Hello", "world!"), sep = " "),
paste(c("Hello","world!"), sep = " "),
paste("Hello", "world!", sep = " ")
paste(c("X", "Y", "Z"), sep = "")
paste(1:3, c("X", "Y", "Z"), sep = "")
LETTERS
paste(LETTERS, 1:4, sep = "-")
x< - c(44, NA, 5, NA)
x<- c(44, NA, 5, NA)
x
x*3
y<-rnom(1000)
y<-rnorm(1000)
z<-rep(NA, 1000)
my_data<-sample(c(y,z), 100)
my_data
is.na(my_data)
my_na<-is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) && x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
c(foo=11, bar = 2, norf = NA)
vect <- c(foo=11, bar = 2, norf = NA)
vect
names(vect)
c(11, 2, NA)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", 'bar', 'norf')
identical(vect, vect2)
vect['bar']
vect[c('foo', 'bar')]
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
my_vector
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2<-matrix(1:20, 4, 5)
identical(my_matrix, my_matrix2)
patients<-c("Bill", 'Gina', 'Kelly', 'Sean')
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames<-c('patient', 'age', 'weight', 'bp', 'rating', 'test')
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
5 == 7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5==6, !FALSE)
ints <- sample(10)
ints
?sample
ints > 5
ints[ints>5]
?which
which(ints > 7)
any(ints < 0)
all(ints > 0)
SYs.Date()
Sys.Date()
mean(c(2,4,5))
source('~/DataScience/R-Programming/Week2/corr.R')
submit()
boring_function('My first function!')
boring_function
submit()
submit()
my_mean(c(4,5,10))
getwd()
submit()
submit()
submit()
submit()
submit()
remainder(50)
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5).
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(c(1.4, 3.6,
| 7.9, 8.8))
evaluate(c(1.4, 3.6,, 7.9, 8.8))
evaluate(c(1.4, 3.6, 7.9, 8.8))
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaulate(function(x)x[1], c(8,4,0))
evaluate(function(x)x[1], c(8,4,0))
evaluate(function(x)x[3], c(8,4,0))
evaluate(function(x)x[length(x)], c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
submit()
telegram('fuck', 'you')
submit()
mad_libs(place="my place", "having sex", "penis")
submit()
"I" %p% "love"" %p% "R!"
"I" %p% "love" %p% "R!"
d1 <- Sys.Date
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
Sys.time()
t1<-Sys.time()
t1
class(t1)
unclass(t1)
as.POSIX.lt(Sys.time())
as.POSIXlt(Sys.time())
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
weekdays(t1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B, %d, %Y %H:%M")
t4<- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units='days')
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
str(cls_list)
class(cls_list)
as.character(cls_list)
?sapply
sapply(cls_list)
sapply(flags, class)
cls_vect sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
head(flag_colors)
flag_colors
sapply(flag_colors, sum)
sapply(flag_colors, sum)
names(flag_colors)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
new_var <- lapply(flag_shapes)
new_var <- lapply(flag_shapes, range)
lapply(flag_shapes, range)
shape_mat <- shape_mat(flag_shapes, range())
shape_mat <- shape_mat(flag_shapes, range
)
shape_mat <- sapply(flag_shapes, range
)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
lapply(flags, unique)
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
?table
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data(iris)
?iris
Sepal.Length
mean(Sepal.Length)
iris
class(iris)
sapply(iris$Sepal.Length, mean)
lapply(iris$Sepal.Length, mean)
iris
lapply(iris[,1], mean)
sapply(iris[,1], mean)
vapply(iris[,1], mean)
iris
tapply(iris$Sepal.Length, iris$Species, mean)
?lapply
is_virginica <- iris$Species[iris$Species=='virginica']
is_virginica
is_virginica <- iris$Species==virginica
is_virginica <- iris$Species=='virginica'
is_virginica
sapply(iris$Sepal.Length[,101:150], mean)
sapply(iris$Sepal.Length[,c(101:150)], mean)
sapply(iris$Sepal.Length[101:150,], mean)
sapply(iris$Sepal.Length, mean)
colMeans(iris$Sepal.Length)
colMeans(iris)
colMeans(iris)
class(iris)
colMeans(iris)
colMeans(iris, 1)
colMeans(iris, 2)
colMeans(iris, x=2)
colMeans(x=iris)
iris$Sepal.Length
iris$Sepal.Length[101:150]
lapply(iris$Sepal.Length[101:150], mean)
sapply(iris$Sepal.Length[101:150], mean)
sapply(iris$Sepal.Length[101:150], mean)
lapply(split(iris, iris$Species), function(x)colMeans(x[,"Petal.Length"]))
lapply(split(iris, iris$Species), function(x) colMeans(x[,c("Petal.Length")]))
lapply(split(iris, iris$Species), function(x) colMeans(x[,c("Petal.Length")]))
split(iris, iris$Species)
dim(split(iris, iris$Species))
dim.data.frame((split(iris, iris$Species))
)
split(iris, iris$Species)
x <- split(iris, iris$Species)
data <- x
lapply(data, function(x) colMeans(x[, c("Sepal.Length")]))
lapply(data, function(x) colMeans(x, "Sepal.Length"))
lapply(data, function(x) colMeans(x = ))
lapply(data, function(y) colMeans(x = y))
?colMeans
data
data$virginica
lapply(data$virginica, function(y) colMeans(x = y))
sapply(split(iris$Sepal.Length, iris$Species), mean)
data <- sapply(split(iris$Sepal.Length, iris$Species), mean)
as.numeric(data$virginica)
data <- sapply(split(iris$Sepal.Length, iris$Species), mean)
data
class(data)
data["virginica"]
as.numeric(data["virginica"])
apply(iris, 2, mean)
apply(iris, 2, mean)
colMeans(iris)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
mtcars
lapply(split(mtcars[, "mpg"]))
split(mtcars$mpg, mtcars$cyl)
lapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
?mapply
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)[1]
tapply(mtcars$mpg, mtcars$cyl, mean)[1]-tapply(mtcars$mpg, mtcars$cyl, mean)[3]
debug(ls)
ls()
function (name, pos = -1L, envir = as.environment(pos), all.names = FALSE,
pattern, sorted = TRUE)
{
if (!missing(name)) {
pos <- tryCatch(name, error = function(e) e)
if (inherits(pos, "error")) {
name <- substitute(name)
if (!is.character(name))
name <- deparse(name)
warning(gettextf("%s converted to character string",
sQuote(name)), domain = NA)
pos <- name
}
}
all.names <- .Internal(ls(envir, all.names, sorted))
if (!missing(pattern)) {
if ((ll <- length(grep("[", pattern, fixed = TRUE))) &&
ll != length(grep("]", pattern, fixed = TRUE))) {
if (pattern == "[") {
pattern <- "\\["
warning("replaced regular expression pattern '[' by  '\\\\['")
}
else if (length(grep("[^\\\\]\\[<-", pattern))) {
pattern <- sub("\\[<-", "\\\\\\[<-", pattern)
warning("replaced '[<-' by '\\\\[<-' in regular expression pattern")
}
}
grep(pattern, all.names, value = TRUE)
}
else all.names
}
?<-
?"<-"
c
debug(ls)
exit
quit
c
c
c
c
undebug(ls)
c
undebug(ls)
undebug(ls())
?solve
x <- 1:6
as.matrix(x)
dim(x)
matrix(x, 2, 3)
y <- matrix(x, 2, 3)
solve(y)
x <- 1:9
y <- matrix(x, 3, 3)
solve(y)
x <- 1:4
y <- matrix(x, 2, 2)
solve(y)
identical(y, y)
source('~/DataScience/R-Programming/Week3/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(y)
list <- makeCacheMatrix(y)
list
cacheSolve(list)
result <- cacheSolve(list)
result
class(result)
source('~/DataScience/R-Programming/Week3/ProgrammingAssignment2/cachematrix.R')
cacheSolve(list)
source('~/DataScience/R-Programming/Week3/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(y)
cacheSolve(list)
list$get_inv_mat()
source('~/DataScience/R-Programming/Week3/ProgrammingAssignment2/cachematrix.R')
list <- makeCacheMatrix(y)
list$get_inv_mat()
cacheSolve(list)
cacheSolve(list)
list$get()
source('~/DataScience/R-Programming/Week3/ProgrammingAssignment2/cachematrix.R')
cacheSolve(list)
cacheSolve(list)
source('~/DataScience/R-Programming/Week3/ProgrammingAssignment2/cachematrix.R')
cacheSolve(list)
cacheSolve(list)
list <- makeCacheMatrix(y)
cacheSolve(list)
cacheSolve(list)
rm(ls())
rm(list=ls())
m
swirl(())
swirl()
quit()
